#!/usr/bin/python3

import sys
import textwrap

class FractionalComponent:
    def __init__(self, value):
        self.value = value

    @property
    def fraction(self):
        return self.value

    @property
    def integral(self):
        return round(self.value * 255)

class IntegralComponent:
    def __init__(self, value, max=255):
        self.value = value
        self.max = max

    @property
    def fraction(self):
        return self.value / self.max

    @property
    def integral(self):
        return self.value

class BadInput(Exception):
    def __init__(self, message):
        super().__init__(message)
        self.message = message

def read_fraction(fraction):
    fraction = float(fraction)
    if not 0 <= fraction <= 1:
        raise BadInput("fractional input must be between 0 and 1")
    return FractionalComponent(float(fraction))

def read_decimal(decimal):
    decimal = int(decimal)
    if not 0 <= decimal <= 255:
        raise BadInput("decimal input must be between 0 and 255")
    return IntegralComponent(decimal)

def read_hex(hex_string):
    decimal = int(hex_string, 16)
    if not 0 <= decimal <= 255:
        raise BadInput("hexadecimal input must be between 00 and FF")
    return IntegralComponent(decimal)

def print_conversions(component):
    print(textwrap.dedent("""\
            fraction:     {fraction:.6f}
            decimal:      {decimal}
            hexadecimal:  {decimal:02x}""")
        .format(fraction=component.fraction, decimal=component.integral)
    )

def main():
    import argparse
    import textwrap

    parser = argparse.ArgumentParser(
        description=textwrap.dedent("""\
            convert individual color components into three formats:

                * fraction (0 to 1)
                * decimal (0 to 255)
                * hexadecimal (00 to FF)
            """),
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument('-x', dest='input_hex')
    parser.add_argument('-f', dest='input_fraction')
    parser.add_argument('-d', dest='input_decimal')
    args = parser.parse_args()

    try:
        if args.input_hex is not None:
            data_in = read_hex(args.input_hex)
        elif args.input_fraction is not None:
            data_in = read_fraction(args.input_fraction)
        elif args.input_decimal is not None:
            data_in = read_decimal(args.input_decimal)
    except BadInput as e:
        print("bad input:", e.message)
        return 1

    print_conversions(data_in)

if __name__ == '__main__':
    sys.exit(main() or 0)
